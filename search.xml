<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jayi</title>
      <link href="/2024/08/28/jiayi/"/>
      <url>/2024/08/28/jiayi/</url>
      
        <content type="html"><![CDATA[<h3 id="云效"><a href="#云效" class="headerlink" title="云效"></a>云效</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://devops.aliyun.com/workbench?orgId=5f83cd2a93de782518722aa9</span><br></pre></td></tr></table></figure><h4 id="蓝湖"><a href="#蓝湖" class="headerlink" title="蓝湖"></a>蓝湖</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/08/28/mqtt/"/>
      <url>/2024/08/28/mqtt/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="mqtt"><a href="#mqtt" class="headerlink" title="mqtt"></a>mqtt</h2><h1 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h1><h4 id="一、mqtt介绍"><a href="#一、mqtt介绍" class="headerlink" title="一、mqtt介绍"></a>一、mqtt介绍</h4><ol><li><p><strong>什么是mqtt</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的“轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。</span><br><span class="line"></span><br><span class="line">MQTT最大优点在于用极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。</span><br></pre></td></tr></table></figure></li><li><p><strong>mqtt特点</strong></p><p>MQTT协议是为硬件性能有限，且工作在低带宽、不可靠的网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要的几项特性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.使用发布/订阅消息模式，提供多对多的消息发布，解除应用程序耦合；</span><br><span class="line"></span><br><span class="line">2.对负载内容屏蔽的消息传输；</span><br><span class="line"></span><br><span class="line">3.使用TCP/IP 提供网络连接；</span><br><span class="line"></span><br><span class="line">4.支持三种消息发布服务质量（QoS）：</span><br><span class="line"></span><br><span class="line">QoS 0（最多一次）：消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这个级别可用于如下情况，环境传感器数据，丢失一次数据无所谓，因为不久后还会有第二次发送。</span><br><span class="line"></span><br><span class="line">QoS 1（至少一次）：确保消息到达，但消息重复可能会发生。</span><br><span class="line"></span><br><span class="line">QoS 2（只有一次）：确保消息到达一次。这个级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</span><br><span class="line"></span><br><span class="line">5.传输数据小，开销很小（固定长度的头部是 2 字节），协议交换最小化，以降低网络流量；(用极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。)</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、MQTT-核心概念"><a href="#二、MQTT-核心概念" class="headerlink" title="二、MQTT 核心概念"></a>二、MQTT 核心概念</h4><p><strong>2.1发布订阅</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MQTT 基于发布订阅模式，它解耦了消息的发送方（发布者）和接收方（订阅者），引入了一个中间代理的角色来完成消息的路由和分发。</span><br><span class="line">发布者和订阅者不需要知道彼此的存在，他们之间唯一的联系就是对消息的一致约定，例如消息将使用什么主题、消息将包含哪些字段等等。</span><br></pre></td></tr></table></figure><p><strong>2.2服务端</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在发布消息的客户端和订阅的客户端之间充当中介，将所有接收到的消息转发到匹配的订阅客户端。所以有时我们也会直接将服务端称为 Broker。</span><br></pre></td></tr></table></figure><p><strong>2.3客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 MQTT协议连接到 MQTT 服务端的设备或应用程序。它既可以是发布者，也可以是订阅者，也可以具备这两种身份。</span><br></pre></td></tr></table></figure><p><strong>2.4主题</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主题被用来标识和区分不同的消息，它是 MQTT 消息路由的基础。发布者可以在发布时指定消息的主题，订阅者则可以选择订阅自己感兴趣的主题来接收相关的消息。</span><br></pre></td></tr></table></figure><p><strong>2.5通配符</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">订阅者可以在订阅的主题中使用通配符来达到一次订阅多个主题的目的。MQTT 提供了单层通配符和多层通配符两种主题通配符，以满足不同的订阅需要。</span><br><span class="line">MQTT 主题通配符包含单层通配符 + 及多层通配符 #，主要用于客户端一次订阅多个主题。（注意：通配符只能用于订阅，不能用于发布。）</span><br></pre></td></tr></table></figure><p><strong>2.6QoS</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三种 QoS 等级：(QoS 越大，消息的传输复杂程度也越高)</span><br><span class="line">QoS 0 最多交付一次，消息可能丢失；</span><br><span class="line">QoS 1 至少交付一次，消息可以保证到达，但是可能重复；</span><br><span class="line">QoS 2 只交付一次，消息保证到达，并且不会重复。</span><br></pre></td></tr></table></figure><p><strong>2.7会话</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QoS 只是设计了消息可靠到达的理论机制，而会话则确保了 QoS 1、2 的协议流程得以真正实现。</span><br><span class="line">会话是客户端与服务端之间的有状态交互，它可以仅持续和网络连接一样长的时间，也可以跨越多个网络连接存在，我们通常将后者称为持久会话。我们可以选择让连接从已存在的会话中恢复，也可以选择从一个全新的会话开始。</span><br></pre></td></tr></table></figure><p><strong>2.8保留消息</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">与普通消息不同，保留消息可以保留在 MQTT 服务器中。任何新的订阅者订阅与该保留消息中的主题匹配的主题时，都会立即接收到该消息，即使这个消息是在它们订阅主题之前发布的。</span><br><span class="line">这使订阅者在上线后可以立即获得数据更新，而不必等待发布者再次发布消息。</span><br></pre></td></tr></table></figure><p><strong>2.9遗嘱消息</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">客户端可以在连接时向服务器设置自己的遗嘱消息，服务器将在客户端异常断开后立即或延迟一段时间后发布这个遗嘱消息。而订阅了对应遗嘱主题的客户端，将收到这个遗嘱消息，并且采取相应的措施，例如更新该客户端的在线状态等等。</span><br></pre></td></tr></table></figure><p><strong>2.10共享订阅</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认情况下，消息会被转发给所有匹配的订阅者。但有时，我们可能希望多个客户端协同处理接收到的消息，以便以水平扩展的方式来提高负载能力。又或者，我们希望为客户端增加一个备份客户端，当主客户端离线时，能够无缝切换到备份客户端继续接收消息，以确保高可用性。</span><br><span class="line">MQTT 的共享订阅特性，则提供了这一能力。我们可以将客户端划分为多个订阅组，消息仍然会被转发给所有订阅组，但每个订阅组内每次只会有一个客户端收到消息。</span><br></pre></td></tr></table></figure><p><strong>2.11$SYS 主题</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以 $SYS/ 为前缀的主题被保留给服务器用来发布一些特定的消息，比如服务器的运行时间、客户端的上下线事件通知、当前连接的客户端数量等等。我们一般将这些主题称为系统主题，客户端可以订阅这些系统主题来获取服务器的有关信息。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2024/08/28/mysql/"/>
      <url>/2024/08/28/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h4 id="一、左连接-，右连接，内连接和全外连接的4者区别"><a href="#一、左连接-，右连接，内连接和全外连接的4者区别" class="headerlink" title="一、左连接 ，右连接，内连接和全外连接的4者区别"></a>一、左连接 ，右连接，内连接和全外连接的4者区别</h4><p>1.1、基本定义：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left join （左连接）：返回包括左表中的所有记录和右表中连接字段相等的记录。</span><br><span class="line">right join （右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。</span><br><span class="line">inner join （等值连接或者叫内连接）：只返回两个表中连接字段相等的行。</span><br><span class="line">full join （全外连接）：返回左右表中所有的记录和左右表中连接字段相等的记录</span><br></pre></td></tr></table></figure><h4 id="二、GROUP-BY-使用方法详解："><a href="#二、GROUP-BY-使用方法详解：" class="headerlink" title="二、GROUP BY 使用方法详解："></a>二、GROUP BY 使用方法详解：</h4><p>2.1、语法：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 聚合函数(字段1)，字段2 </span><br><span class="line">from 表名</span><br><span class="line">where 条件 </span><br><span class="line">group by 字段2,字段3</span><br><span class="line">或者</span><br><span class="line">select 聚合函数(字段1)，字段2 </span><br><span class="line">from 表名 </span><br><span class="line">where 条件 </span><br><span class="line">group by 字段2,字段3 having 过滤条件</span><br><span class="line">使用了group by 后，要求select出的结果字段都是可汇总的，否则就会出错。</span><br><span class="line">group by 有一个原则,就是 select 后面的所有列中,没有使用聚合函数的列,必须出现在 group by 后面。</span><br></pre></td></tr></table></figure></blockquote><p>2.2、where和having的使用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、where+group by</span><br><span class="line">where 限定的条件查询会在group by 分组之前执行。</span><br><span class="line">2、group by+having</span><br><span class="line">having限定的条件查询会在group by分组之后查询。</span><br><span class="line">3、where+group by+having</span><br><span class="line">where和having在一起使用的时候，会先执行where的限定条件查询，最后再执行having的限定条件查询。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.3、聚合函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用的聚合函数有：count() 计数, sum() 求和 , avg() 求平均值, max() 求最大值, min()求最小值。</span><br></pre></td></tr></table></figure><p>2.4、group by的其他可用参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、group by rollup( )：   这里比不加 rollup()的查询结果多了一行总计。</span><br><span class="line"></span><br><span class="line">2、group by cube( )：</span><br><span class="line">  添加cube()后不但增加了一行总计，还增加了每一组单项统计的合计。group by cube为所有可能的列组合创建组。 对于 group by cube (a, b)，结果具有 (a, b)、(NULL, b)、(a, NULL) 和 (NULL, NULL) 唯一值的组。</span><br><span class="line"></span><br><span class="line">3、group by grouping sets ( )  ：</span><br><span class="line">grouping sets选项可将多个 group by子句组合到一个 group by 子句中。 其结果与针对指定的组执行 union all运算等效。</span><br></pre></td></tr></table></figure><h4 id="三、窗口函数-RANK-（Mysql-8-）"><a href="#三、窗口函数-RANK-（Mysql-8-）" class="headerlink" title="三、窗口函数 RANK()（Mysql 8 ）"></a>三、窗口函数 <code>RANK()</code>（Mysql 8 ）</h4><p>1.1 窗口函数概念：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">窗口函数，也叫OLAP函数（Online Anallytical Processing，联机分析处理），可以对数据库数据进行实时分析处理。</span><br><span class="line"></span><br><span class="line">窗口函数在MySQL 8中引入，是Mysql 8的新特性。是一种主要用于数据分析、特定字段分组等的一种特殊的函数。</span><br><span class="line"></span><br><span class="line">常见使用场景：</span><br><span class="line">数据分析，如排名、排序、分组统计、计算、前后值比较等</span><br><span class="line">对某些分组场景简化SQL，提升效率</span><br><span class="line">常用于子查询，将一些复杂条件简化</span><br></pre></td></tr></table></figure><p>1.2 窗口函数语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">窗口函数([参数]) OVER (</span><br><span class="line">  [PARTITION BY &lt;分组列&gt;] </span><br><span class="line">  [ORDER BY &lt;排序列 ASC/DESC&gt;]</span><br><span class="line">  [ROWS BETWEEN 开始行 AND 结束行]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">1.PARTITION BY  子句用于指定分组列，关键字：PARTITION BY 。  用于指定如何对数据进行分组。</span><br><span class="line">2.ORDER BY  子句用于指定排序列，关键字ORDER BY 。   用于指定窗口内的排序规则。</span><br><span class="line">3.ROWS BETWEEN   子句用于指定窗口的范围，关键字ROWS BETWEEN 即[开始行]、[结束行]。 定义了窗口的具体范围。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3 聚合窗口函数:</p><table><thead><tr><th align="center">函数名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">SUM</td><td align="center">求和</td></tr><tr><td align="center">AVG</td><td align="center">求平均值</td></tr><tr><td align="center">COUNT</td><td align="center">求数量</td></tr><tr><td align="center">MAX</td><td align="center">求最大值</td></tr><tr><td align="center">MIN</td><td align="center">求最小值</td></tr></tbody></table><p>1.4 专用窗口函数:</p><table><thead><tr><th align="center">函数名</th><th align="center">分类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">RANK</td><td align="center">排序函数</td><td align="center">类似于排名，并列的结果序号可以重复，序号不连续</td></tr><tr><td align="center">DENSE_RANK</td><td align="center">排序函数</td><td align="center">类似于排名，并列的结果序号可以重复，序号连续</td></tr><tr><td align="center">ROW_NUMBER</td><td align="center">排序函数</td><td align="center">对该分组下的所有结果作一个排序，基于该分组给一个行数</td></tr><tr><td align="center">PERCENT_RANK</td><td align="center">分布函数</td><td align="center">每行按照公式 <code>(rank-1) / (rows-1)</code> 进行计算</td></tr><tr><td align="center">CUME_DIST</td><td align="center">分布函数</td><td align="center">分组内小于、等于当前 rank 值的行数 &#x2F; 分组内总行数</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端</title>
      <link href="/2024/08/28/%E5%89%8D%E7%AB%AF/"/>
      <url>/2024/08/28/%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="Flex-布局教程"><a href="#Flex-布局教程" class="headerlink" title="Flex 布局教程"></a>Flex 布局教程</h2><p>html模板</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div class=&quot;box&quot;&gt;//div元素（代表骰子的一个面）是Flex容器</span><br><span class="line">  &lt;span class=&quot;item&quot;&gt;点&lt;/span&gt; //span元素（代表一个点）是Flex项目</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol><li><p>单项目</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左上（默认）</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">中上</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">右上</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> 左中</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">中中</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content：center；</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">中右</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content：flex-end；</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">左下</span><br><span class="line">.box&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">    align-items: flex-end;</span><br><span class="line">&#125;</span><br><span class="line">中下</span><br><span class="line">.box&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">    justify-content:center;</span><br><span class="line">    align-items: flex-end;</span><br><span class="line">&#125;</span><br><span class="line">右下</span><br><span class="line">.box&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">    justify-content:flex-end;//左右移动</span><br><span class="line">    align-items: flex-end;//垂直移动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双项目（span加一个）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 左右</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">上下</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"> 上下居中</span><br><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前端打包</span><br><span class="line">命令：npm run build:prod</span><br><span class="line">查找服务 ps -ef | grep ruoyi-admin.jar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>经验</title>
      <link href="/2024/08/28/%E7%BB%8F%E9%AA%8C/"/>
      <url>/2024/08/28/%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>字符串转json</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String translate = WebOTS.translate(from, to, text);</span><br><span class="line"></span><br><span class="line"> JSONObject jsonObj = new JSONObject(translate);</span><br><span class="line"></span><br><span class="line"> JSONObject data = jsonObj.getJSONObject(&quot;data&quot;);</span><br><span class="line"></span><br><span class="line"> JSONObject result = data.getJSONObject(&quot;result&quot;);</span><br><span class="line"></span><br><span class="line"> JSONObject transResult = result.getJSONObject(&quot;trans_result&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字符串转对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gson json = new Gson(); </span><br><span class="line">TranslatorController.ResponseData resultData = json.fromJson(transResult.toString(), TranslatorController.ResponseData.class);</span><br></pre></td></tr></table></figure><p>docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看所有镜像docker ps -a</span><br><span class="line">查看镜像   docker ps</span><br><span class="line">到路径 cd /home/minio/</span><br><span class="line">启动脚本 ./minio_run.sh </span><br><span class="line">查看日志 docker logs broadcast</span><br><span class="line">关闭镜像docker stop &lt;container_id_or_name&gt;</span><br><span class="line">删除镜像docker rmi &lt;image_id_or_repository:tag&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">||!ObjectUtils.isEmpty(maps.get(&quot;Dev_state&quot;))||</span><br><span class="line">                        !ObjectUtils.isEmpty(maps.get(&quot;Amp_pwron&quot;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java提升</title>
      <link href="/2024/08/12/java%E6%8F%90%E5%8D%87/"/>
      <url>/2024/08/12/java%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<ol><li><strong>深入理解基础</strong>：<ul><li>复习并深入理解Java的核心概念，如封装、继承、多态、抽象类、接口、集合框架、异常处理、泛型、反射、枚举等。</li><li>熟悉JVM的工作原理，包括内存模型、垃圾回收机制、类加载过程等。</li><li>学习并掌握设计模式，如单例模式、工厂模式、策略模式、装饰者模式等。</li></ul></li><li><strong>提高编码质量</strong>：<ul><li>遵循良好的编码规范，如Google Java Style Guide。</li><li>学习并使用单元测试框架如JUnit，确保代码的可测试性和健壮性。</li><li>使用静态代码分析工具，如SonarQube或FindBugs，来识别潜在的代码问题。</li><li>掌握重构技巧，保持代码整洁，易于维护。</li></ul></li><li><strong>框架与库的学习</strong>：<ul><li>深入学习Spring框架，包括Spring MVC、Spring Boot、Spring Security等。</li><li>学习数据库相关技术，如JPA、Hibernate、MyBatis等ORM框架。</li><li>掌握前端技术，如HTML、CSS、JavaScript以及框架如Angular、React或Vue.js（虽然不是Java，但对全栈开发有帮助）。</li></ul></li><li><strong>性能优化</strong>：<ul><li>学习如何优化代码性能，包括算法优化、缓存策略、异步编程等。</li><li>学习数据库优化技巧，如SQL查询优化、索引管理、事务控制等。</li></ul></li><li><strong>软技能提升</strong>：<ul><li>提高问题解决能力，遇到难题时学会利用搜索引擎、官方文档、Stack Overflow等资源。</li><li>增强团队协作能力，学习敏捷开发方法如Scrum或Kanban。</li><li>学会编写清晰的技术文档和有效的沟通。</li></ul></li><li><strong>持续学习和关注新技术</strong>：<ul><li>定期阅读技术博客、论坛、书籍，订阅技术新闻，了解Java领域的新技术和趋势。</li><li>参加技术研讨会、会议，与其他开发者交流，扩大视野。</li></ul></li><li><strong>实战项目</strong>：<ul><li>尝试参与开源项目，贡献代码，这不仅可以提升技能，还能建立良好的职业声誉。</li><li>自己动手实现一些小项目，如构建一个简单的Web应用、微服务架构应用等，实践是最好的老师。</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人博客创建</title>
      <link href="/2024/08/09/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/08/09/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>1、配置环境</p><p>桌面右击，打开<strong>git bash here</strong>输入命令安装（默认位置即可，方面后续配置，不建议修改） </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli    （成功：added 53 packages in 12s）</span><br></pre></td></tr></table></figure><p>D盘新建的 hexo-jason-blog 文件夹 在该文件夹下打开 git bash here 输入命令 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>hexo的文件结构 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public 最终所见网页的所有内容</span><br><span class="line">node_modules 插件以及hexo所需node.js模块</span><br><span class="line">_config.yml 站点配置文件，设定一些公开信息等</span><br><span class="line">package.json 应用程序信息，配置hexo运行所需js包</span><br><span class="line">scaffolds 模板文件夹，新建文章，会默认包含对应模板内容</span><br><span class="line">themes 存放主题文件，hexo根据主题生成静态网页（速度贼快）</span><br><span class="line">source 用于存放用户资源（除 posts 文件夹，其余命名方式为 “ + 文件名”的文件被忽略）</span><br></pre></td></tr></table></figure><p>打开根目录 hexo-jason-blog ，打开终端并输入命令 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s     默认是hexo内置的landscape 主题 </span><br></pre></td></tr></table></figure><p>换主题,Terminal 输入命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>等待安装完成，<strong>themes</strong>文件夹下显示了<strong>butterfly</strong>主题的一些文件 <strong>_config.yml</strong>文件，修改主题为<strong>butterfly</strong> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>本地预览</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean //执行此命令后继续下一条</span><br><span class="line">hexo g //生成博客目录</span><br><span class="line">hexo s //本地预览</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2024/08/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/08/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/08/09/hello-world/"/>
      <url>/2024/08/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean //执行此命令后继续下一条</span><br><span class="line">hexo g //生成博客目录</span><br><span class="line">hexo s //本地预览</span><br><span class="line">hexo d //部署项目</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
